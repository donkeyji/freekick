/*To Do*/
1. to implement a better pool algrithm.现有的算法有问题，当分配的次数增大到一定程度时，还不如直接malloc/free来的快。

2.container默认都不负责其中存放对象的生命周期。fk_list/fk_dict通过指定copy/free函数来定制是否管理对象的生命周期。

3.fk_evmgr不管理tmev/ioev对象的生命周期，由外部来create/destroy tmev/ioev对象。kk

4.对象的管理原则：
		A--own-->B 
	==> A--create/destroy-->B 
	==> A--add/remove-->B 
	==> A--call-->B
	==> B--notify-->A

5.fk_conn的write/read buf的长度限制	

6.内存流向:
	socket--(copy)-->
	read_buf--(copy)-->
	args--(move)-->db

7.server返回给client的协议如何pack比较漂亮

8.kqueue比epoll使用起来要方便。kqueue将一对fd/ev作为一个单元添加，所以同一个fd的write和read事件可以分两次kevent来添加，而epoll则第一次是add，第二次则需要modify，麻烦得要死。

9.dict上的element中的value统一都是fk_obj类型，fk_obj作为wrapper封装fk_str/fk_list/fk_dict，不copy内存，只保存fk_str/fk_list/fk_dict的指针。

10.fk_list通过data_cmp来实现有序插入。

11.fk_dict的iterator实现

12.fk_list的iterator优化?

13.多数的segment fault都是非法内存的访问导致的，比如未初始化的内存，越界, 无权限写文件...

14.解析config文件采取跟解析protocol类似的处理办法，流水线作业。

15.如何将用作db的dict实现序列化和反序列化。

16.存入dict的key/value对象由外部创建，通过fk_dict_add存入dict时不copy内存，通过fk_dict_remove删除时由dict来负责将key/value对象free掉。或者在update数据时，将旧的value对象free掉。

17.用作db的顶层fk_dict，用作排序链表的fk_list，用作集合的fk_dict，用作子dict的fk_dict都不copy内存，但是free内存。   no copy!!! do free!!!

18.用作集合的dict，其value为空，只使用key。

19.ioev的callback的返回值如何处理？callback出错应该直接忽略？

20.将所有的dep文件统一放入一个Makefile.dep文件中，不能用-o参数来输出，只能重定向。
	gcc -MM $(SVRSRC) > Makefile.dep

21.EV_WRITE的事件只有当write_buf不为空时才加入到evmgr中，当write_buf发送空之后就从evmgr中删除，否则epoll/kqueue会不停的返回WRITE事件。

22.malloc之后需要判断返回值为NULL吗？初始化阶段的malloc不需要判断为NULL？

23.fk_tmev是fk_leaf的子类，以实现对idx成员的统一操作。

24.ioev/tmev不方便用通用的fk_list来存放，因为无法直接从链表中删除，只能遍历时删除。

25.connection达到上限时，如何处理新到来的连接?

26.epoll/kqueue/poll/select用于控制timeout的参数类型和含义不相同，统一以struct timeval为参数。

27.getline()库函数内部为每一行malloc了内存，在读取文件完毕后要free掉该指针。

28.sys/time.h对BSD和linux有不同的macro。

29.-std=c99编译时，linux下使用struct sigaction会提示不知道该结构的size，莫名其妙。。。
30.libevent/libev的kqueue，将event注册和event的poll合并一个kevent调用。可能会产生EINVAL/ENOENT/EBADF错误。而我这里将kqueue用类似epoll_ctl/epoll_wait方式调用，不会产生前述3中错误，因此在kevent返回之后无需去处理这3中错误。

31.epoll的EPOLLERR/EPOLLHUP何时会产生，如何处理呢？

32.malloc/realloc/free等产生的内存错误不必处理，因为如果出现了这样的错误，进程就无法运行下去了，无法处理这样的错误。需要错误处理的是那些人为导致的异常。

33.在fk_mem_alloc/relloc里统一处理分配失败的问题，只要分配失败之际abort()，在外部逻辑里就不再需要判断分配是否成功了。

34.为何换用新的dict后，反而速度比以前慢了，没有调用到的fk_obj_destroy为何会出现在profile里呢?

35.能用移位代替*2或者/2的地方尽量代替。

36.由于fk_on_set没有正确调用fk_conn_arg_consume，会导致memory leak。

37.可以用gdb来定位segment fault。发生segment fault时进程会收到SIGSEG信号，gdb会定位发生segment fault的准确位置。

38.container类型的struct增加一个fk_xxx_clear/fk_xxx_reset成员函数。

39.为何编译时加了优化选项-O2之后做profile时会出现莫名其妙的根本不会出现的函数调用?

40.由于定义fk_util_conns_to_files宏没有加括号()，导致在server.conns_tab分配内存时计算错误: server.conns_tab = (fk_conn **)fk_mem_alloc(sizeof(fk_conn *) * fk_util_conns_to     _files(setting.max_conn));
当将max_conn设置为2时，且第一个connection的fd为6，将第一个connection存入conns_tab时，由于内存越界，刚好将server.listen_ev的内存给覆盖，造成了诡异的错误。
 server.conns_tab[conn->fd] = conn;
server.conns_tab[6]的地址刚好与server.listen_ev地址相同。

41.在将db序列化时，需要将字符串的长度和内容都写入文件，如果采用纯文本格式写入，调用fprintf将字符串序列化成C/S间传输的协议那种格式，以\r\n来分隔，会导致反序列化时读入的麻烦，因为一个空字符串序列化成0\r\n\r\n这样，fread()会将2个\r\n合并成一个\r\n，导致读入字符串内容错误。所以并不适合采用这种字符格式的序列化，而采用fwrite()将字符串的长度以二进制的方式写入，后面紧跟字符串的内容，不加\r\n。

42.在fwrite字符串的长度时，由于我这里fk_str/fk_list/fk_dict的长度都用的是size_t类型，size_t长度会依赖32/64平台变化，且有大小端的问题，网络字节序的转换也不好弄，htonl只能转换32-bit宽度的整数。所以目前的db文件不支持32-bit与64-bit直接的移植，也不支持大小端不同的机器上的移植。

42.给不同的模块定义不同的状态码，用来表示不同的返回值。例如, FK_OK, FK_ERR...

43.协议处理函数最好能返回状态码，由此来判断协议执行的状态。redis, memcached就没有返回值，pop3d作了返回值。freekick也提供了返回值。

44.为必要的模块定义FK_MOD_OK/FK_MOD_ERR状态码，用来作为模块内函数的返回值，避免直接用0，-1等数字，从而有更明确的含义。

45.供lua调用的c函数，其栈是一个全新的栈，lua_gettop(L)得到的就是lua传给这个c函数的参数个数。该c函数调用完后，其栈被完全释放，不再影响lua_gettop(L)的值。

46.为何执行的lua脚本有时候导致server在fk_conn_cmd_proc出现segment fault?

47.在定义带参数的宏时，要注意宏参数不能与代码块中的变量名相同，否则在预处理时进行字符串替换时，会将同名的变量也当做宏参数进行了替换，造成错误。如:
#define fk_node_data_set(lst, nd, data) {	\
	nd->data = data;						\
}
会将nd->data处的data也当成了宏参数，造成不必要的错误。

48.为何在linux下编译时需要加上-ldl选项? dlopen/dlsym等接口

49.需要注意的问题:
(1)哪些地方需要记录日志，记录何种级别的日志
(2)函数的参数检验
(3)内存如何管理
(4)模块如何划分
(5)变量的值的上下限的确定
(6)错误码的定义，每个模块定义自己的错误码
(7)全景变量的管理
(8)出错的处理，严重的错误就exit进程
(9)函数的返回值的选取，回调函数的返回值是否需要关心
(10)何时应该assert()
(11)定义哪些操作性的宏

50.linux下，编译安装了jemalloc，需要ldconfig -v重新生成一下/etc/ld.so.cache文件，因为是靠这个cache文件来寻找so文件。

51.freekick并不支持inline类型的协议，以空格分隔参数；只支持标准的二进制安全协议，以\r\n分隔。

52.对fk_str类型的fk_item进行引用计数，而避免相同的字符串存在多份。

53.fk_str类型是不变的，不对已有fk_str对象进行修改，只能生成新的fk_str对象。

54.讲freekick.c的内容按功能划分split到不同的fk_svr_xxx.c文件中去，这些fk_svr_xxx.c文件没有相应的fk_svr_xxx.h文件，并非完全独立的模块(.h/.c)，而只是作为freekick.c文件的一部分而共同实现freekick.h中申明的接口。fk_svr_xxx.c文件和freekick.c都各自包含自己需要的头文件，而不在freekick.h中统一包含，freekick.h中仍旧只include必要申明类型的头文件。freekick.c和fk_svr_xxx.c文件都共同维护server这个全景变量，所以在freekick.h中来将server申明为extern。freekick.h+freekick.c+fk_svr_xxx.c共同构成一个完整的模块。

55./usr/include/features.h中定义了__STRICT_ANSI__/_POSIX_SOURCE/_BSD_SOURCE/_XOPEN_SOURCE/_GNU_SOURCE等宏，glibc用以来支持不同的规范，用户可以自定义这些宏来指定不同的规范，通常将这些宏定义放在源文件的第一行，或者gcc -D来指定。_GNU_SOURCE打开，则支持所有规范和gnu的扩展；如果不指定，系统有默认值，见features.h中的注释说明。

56.__builtin_expect/__extension宏????

57.glibc支持iso c/posix/bsd/sysv/xopen5个standard，iso < posix < bsd(sysv).

58.mac下/usr/include/AvailabilityMacros.h定义了MAC_OS_X_VERSION_10_0 --> MAC_OS_X_VERSION_10_*的定义，*表示当前的版本，例如10.9中就是9，10.10中就是10，用以区分当前mac的版本。

59.fk_conn与fk_server有彼此数据的交互，还是作为一个模块比较好。fk_conn与fk_list这种纯粹的数据结构模块不一样，fk_conn有状态数据的维护，需要直接访问server全局变量。

60.只在freekick.c和fk_svr_xxx.c里直接访问setting这个全局变量，其它模块需要读取配置的采用参数传递方式，例如fk_ev_init/fk_log_init，这样ev/log模块更加独立，与具体逻辑无关了。这样子好吗？

61.模块层次：fk_str是最基础的一个模块，提供了最基础的fk_str对象实现，在整个项目中，除了一些必须以char *形式提供的库函数参数外，都以fk_str来表示字符串，包括在fk_conf中。
(1)fk_mem/fk_util
(2)fk_str/fk_list/fk_buf
这是最下面2层的模块

62.fk_epoll/fk_kqueue/fk_poll是fk_ev的plugin，fk_ev是framework，fk_ev提供了fk_ev_active()接口供plugin调用。

63.将fk_svr从freekick.c单独出来，在freekick.c中只处理main函数的逻辑，让程序模块层次更清晰一些。fk_svr模块由fk_svr.h,fk_svr.c,fk_svr_xxx.c共同构成。

64.把fk_epoll.c/fk_kqueue.c/fk_poll.c改名为fk_ev_epoll.c/fk_ev_kqueue.c/fk_ev_poll.c，更好的表明这三个模块实质为fk_ev.c子模块。
