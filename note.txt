1. to implement a better pool algrithm.现有的算法有问题，当分配的次数增大到一定程度时，还不如直接malloc/free来的快。

2. container默认都不负责其中存放对象的生命周期。fk_list/fk_dict通过指定copy/free函数来定制是否管理对象的生命周期。

3. fk_evmgr不管理tmev/ioev对象的生命周期，由外部来create/destroy tmev/ioev对象，fk_evmgr也不负责remove tmev/ioev，全部由外部来调用add/remove tmev/ioev对象。

4. 对象的管理原则：
        A--own-->B 
    ==> A--create/destroy-->B 
    ==> A--add/remove-->B 
    ==> A--call-->B
    ==> B--notify-->A

5. fk_conn的write/read buf的长度限制

6. 内存流向:
    socket--(copy)-->
    read_buf--(copy)-->
    args--(move)-->db

7. server返回给client的协议如何pack比较漂亮

8. kqueue比epoll使用起来要方便。kqueue将一对fd/ev作为一个单元添加，所以同一个fd的write和read事件可以分两次kevent来添加，而epoll则第一次是add，第二次则需要modify，麻烦得要死。

9. dict上的element中的value统一都是fk_obj类型，fk_obj作为wrapper封装fk_str/fk_list/fk_dict，不copy内存，只保存fk_str/fk_list/fk_dict的指针。

10. fk_list通过data_cmp来实现有序插入。

11. fk_dict的iterator实现

12. fk_list的iterator优化?

13. 多数的segment fault都是非法内存的访问导致的，比如未初始化的内存，越界, 无权限写文件...

14. 解析config文件采取跟解析protocol类似的处理办法，流水线作业。

15. 如何将用作db的dict实现序列化和反序列化。

16. 存入dict的key/value对象由外部创建，通过fk_dict_add存入dict时不copy内存，通过fk_dict_remove删除时由dict来负责将key/value对象free掉。或者在update数据时，将旧的value对象free掉。

17. 用作db的顶层fk_dict，用作排序链表的fk_list，用作集合的fk_dict，用作子dict的fk_dict都不copy内存，但是free内存。   no copy!!! do free!!!

18. 用作集合的dict，其value为空，只使用key。

19. ioev的callback的返回值如何处理？callback出错应该直接忽略？

20. 将所有的dep文件统一放入一个Makefile.dep文件中，不能用-o参数来输出，只能重定向。
    gcc -MM $(SVRSRC) > Makefile.dep

21. EV_WRITE的事件只有当write_buf不为空时才加入到evmgr中，当write_buf发送空之后就从evmgr中删除，否则epoll/kqueue会不停的返回WRITE事件。

22. malloc之后需要判断返回值为NULL吗？初始化阶段的malloc不需要判断为NULL？

23. fk_tmev是fk_leaf的子类，以实现对idx成员的统一操作。

24. ioev/tmev不方便用通用的fk_list来存放，因为无法直接从链表中删除，只能遍历时删除。

25. connection达到上限时，如何处理新到来的连接?

26. epoll/kqueue/poll/select用于控制timeout的参数类型和含义不相同，统一以struct timeval为参数。

27. getline()库函数内部为每一行malloc了内存，在读取文件完毕后要free掉该指针。

28. sys/time.h对BSD和linux有不同的macro。

29. -std=c99编译时，linux下使用struct sigaction会提示不知道该结构的size，莫名其妙。。。
30. libevent/libev的kqueue，将event注册和event的poll合并一个kevent调用。可能会产生EINVAL/ENOENT/EBADF错误。而我这里将kqueue用类似epoll_ctl/epoll_wait方式调用，不会产生前述3中错误，因此在kevent返回之后无需去处理这3中错误。

31. epoll的EPOLLERR/EPOLLHUP何时会产生，如何处理呢？

32. malloc/realloc/free等产生的内存错误不必处理，因为如果出现了这样的错误，进程就无法运行下去了，无法处理这样的错误。需要错误处理的是那些人为导致的异常。

33. 在fk_mem_alloc/relloc里统一处理分配失败的问题，只要分配失败之际abort()，在外部逻辑里就不再需要判断分配是否成功了。

34. 为何换用新的dict后，反而速度比以前慢了，没有调用到的fk_obj_destroy为何会出现在profile里呢?

35. 能用移位代替*2或者/2的地方尽量代替。

36. 由于fk_on_set没有正确调用fk_conn_arg_consume，会导致memory leak。

37. 可以用gdb来定位segment fault。发生segment fault时进程会收到SIGSEG信号，gdb会定位发生segment fault的准确位置。

38. container类型的struct增加一个fk_xxx_clear/fk_xxx_reset成员函数。

39. 为何编译时加了优化选项-O2之后做profile时会出现莫名其妙的根本不会出现的函数调用?

40. 由于定义fk_util_conns_to_files宏没有加括号()，导致在server.conns_tab分配内存时计算错误: server.conns_tab = (fk_conn **)fk_mem_alloc(sizeof(fk_conn *) * fk_util_conns_to     _files(setting.max_conn));
当将max_conn设置为2时，且第一个connection的fd为6，将第一个connection存入conns_tab时，由于内存越界，刚好将server.listen_ev的内存给覆盖，造成了诡异的错误。
 server.conns_tab[conn->fd] = conn;
server.conns_tab[6]的地址刚好与server.listen_ev地址相同。

41. 在将db序列化时，需要将字符串的长度和内容都写入文件，如果采用纯文本格式写入，调用fprintf将字符串序列化成C/S间传输的协议那种格式，以\r\n来分隔，会导致反序列化时读入的麻烦，因为一个空字符串序列化成0\r\n\r\n这样，fread()会将2个\r\n合并成一个\r\n，导致读入字符串内容错误。所以并不适合采用这种字符格式的序列化，而采用fwrite()将字符串的长度以二进制的方式写入，后面紧跟字符串的内容，不加\r\n。

42. 在fwrite字符串的长度时，由于我这里fk_str/fk_list/fk_dict的长度都用的是size_t类型，size_t长度会依赖32/64平台变化，且有大小端的问题，网络字节序的转换也不好弄，htonl只能转换32-bit宽度的整数。所以目前的db文件不支持32-bit与64-bit直接的移植，也不支持大小端不同的机器上的移植。

42. 给不同的模块定义不同的状态码，用来表示不同的返回值。例如, FK_OK, FK_ERR...

43. 协议处理函数最好能返回状态码，由此来判断协议执行的状态。redis, memcached就没有返回值，pop3d作了返回值。freekick也提供了返回值。

44. 为必要的模块定义FK_MOD_OK/FK_MOD_ERR状态码，用来作为模块内函数的返回值，避免直接用0，-1等数字，从而有更明确的含义。

45. 供lua调用的c函数，其栈是一个全新的栈，lua_gettop(L)得到的就是lua传给这个c函数的参数个数。该c函数调用完后，其栈被完全释放，不再影响lua_gettop(L)的值。

46. 为何执行的lua脚本有时候导致server在fk_conn_cmd_proc出现segment fault?

47. 在定义带参数的宏时，要注意宏参数不能与代码块中的变量名相同，否则在预处理时进行字符串替换时，会将同名的变量也当做宏参数进行了替换，造成错误。如:
#define fk_node_data_set(lst, nd, data) {   \
    nd->data = data;                        \
}
会将nd->data处的data也当成了宏参数，造成不必要的错误。

48. 为何在linux下编译时需要加上-ldl选项? dlopen/dlsym等接口

49. 需要注意的问题:
(1)哪些地方需要记录日志，记录何种级别的日志
(2)函数的参数检验
(3)内存如何管理
(4)模块如何划分
(5)变量的值的上下限的确定
(6)错误码的定义，每个模块定义自己的错误码
(7)全景变量的管理
(8)出错的处理，严重的错误就exit进程
(9)函数的返回值的选取，回调函数的返回值是否需要关心
(10)何时应该assert()
(11)定义哪些操作性的宏

50. linux下，编译安装了jemalloc，需要ldconfig -v重新生成一下/etc/ld.so.cache文件，因为是靠这个cache文件来寻找so文件。

51. freekick并不支持inline类型的协议，以空格分隔参数；只支持标准的二进制安全协议，以\r\n分隔。

52. 对fk_str类型的fk_item进行引用计数，而避免相同的字符串存在多份。

53. fk_str类型是不变的，不对已有fk_str对象进行修改，只能生成新的fk_str对象。

54. 讲freekick.c的内容按功能划分split到不同的fk_svr_xxx.c文件中去，这些fk_svr_xxx.c文件没有相应的fk_svr_xxx.h文件，并非完全独立的模块(.h/.c)，而只是作为freekick.c文件的一部分而共同实现freekick.h中申明的接口。fk_svr_xxx.c文件和freekick.c都各自包含自己需要的头文件，而不在freekick.h中统一包含，freekick.h中仍旧只include必要申明类型的头文件。freekick.c和fk_svr_xxx.c文件都共同维护server这个全景变量，所以在freekick.h中来将server申明为extern。freekick.h+freekick.c+fk_svr_xxx.c共同构成一个完整的模块。

55. /usr/include/features.h中定义了__STRICT_ANSI__/_POSIX_SOURCE/_BSD_SOURCE/_XOPEN_SOURCE/_GNU_SOURCE等宏，glibc用以来支持不同的规范，用户可以自定义这些宏来指定不同的规范，通常将这些宏定义放在源文件的第一行，或者gcc -D来指定。_GNU_SOURCE打开，则支持所有规范和gnu的扩展；如果不指定，系统有默认值，见features.h中的注释说明。

56. __builtin_expect/__extension宏????

57. glibc支持iso c/posix/bsd/sysv/xopen5个standard，iso < posix < bsd(sysv).

58. mac下/usr/include/AvailabilityMacros.h定义了MAC_OS_X_VERSION_10_0 --> MAC_OS_X_VERSION_10_*的定义，*表示当前的版本，例如10.9中就是9，10.10中就是10，用以区分当前mac的版本。

59. fk_conn与fk_server有彼此数据的交互，还是作为一个模块比较好。fk_conn与fk_list这种纯粹的数据结构模块不一样，fk_conn有状态数据的维护，需要直接访问server全局变量。

60. 只在freekick.c和fk_svr_xxx.c里直接访问setting这个全局变量，其它模块需要读取配置的采用参数传递方式，例如fk_ev_init/fk_log_init，这样ev/log模块更加独立，与具体逻辑无关了。这样子好吗？

61. 模块层次：fk_str是最基础的一个模块，提供了最基础的fk_str对象实现，在整个项目中，除了一些必须以char *形式提供的库函数参数外，都以fk_str来表示字符串，包括在fk_conf中。
(1)fk_mem/fk_util
(2)fk_str/fk_list/fk_buf
这是最下面2层的模块

62. fk_epoll/fk_kqueue/fk_poll是fk_ev的plugin，fk_ev是framework，fk_ev提供了fk_ev_active()接口供plugin调用。

63. 将fk_svr从freekick.c单独出来，在freekick.c中只处理main函数的逻辑，让程序模块层次更清晰一些。fk_svr模块由fk_svr.h,fk_svr.c,fk_svr_xxx.c共同构成。

64. 把fk_epoll.c/fk_kqueue.c/fk_poll.c改名为fk_ev_epoll.c/fk_ev_kqueue.c/fk_ev_poll.c，更好的表明这三个模块实质为fk_ev.c子模块。

65. 关于fk_ev模块的使用:必须按照规则调用，先create-->add-->remove，fk_ev不保证event对象的产生和回收，全部由外部逻辑处理，不正确的调用会导致内存泄露，段错误等问题。

66. fk_svr_lua中lua_conn的create/free/destroy的时机。

67. 在fk_xxx_destroy函数中，不必要在调用了某个field的destroy函数后对其赋值NULL。

68. 命名方式:
(1)function:
对struct:fk_class_verb[_obj]，如fk_list_insert_head/fk_str_create
对module:fk_mod_verb[_obj]，如fk_log_init/fk_ev_add_ioev
(2)struct:
fk_class
(3)macro:
FK_CLASS_XXX/FK_MOD_XXX

69. 为何我使用jemalloc时就无法使用valgrind来检查memory leak呢？去掉Makefile中与jemalloc相关的option，使用原生的libc的malloc就可以使用valgrind检测memory leak了。难怪这么长的时间我使用valgrind都查不出memory leak来，我靠...

70. const的使用有没有必要呢?

71. 在stdint.h中使用到了__WORDSIZE这个宏，用以确定该平台上字长。在Mac 10.9(64 bit)中，通过__LP64__宏来控制__WORDSIZE的长度；在debian 7(64 bit)中通过__x86_64宏来确定__WORDSIZE的长度；在centos 5(32 bit)中，直接定义了__WORDSIZE的长度。用cpp -dM t.c来查看所有预定义的宏，不是gcc -dM t.c。

72. 下面这个#if永远都会成立，这里不区分大小写，且不论HUGE这个宏是否有定义过。
#if HUGE == hUGe
#include <huge.h>
#endif

73. 一般情况下，函数并不检查参数的有效性，参数的有效性由调用者控制，如果调用者传入的参数不正确，那就是程序逻辑有错误。

74. 用fk_conn.arg_idx去代替fk_conn.arg_cnt更合理。

75. printf("%zu\n", 5);
在mac下gcc警告，会将立即数当做int类型，debian下gcc无警告，可以将立即数当做char/short/int/long/size_t来print。
size_t a = 5;
这样的赋值操作二者均不会有警告。

76. 类似fk_buf.len，到底是采用size_t/int/long/uint32_t/uint64_t中的那一个种，取决于程序对于数据量的规划，只要能满足所用到的数据库，就无所谓int/long/size_t。不能依赖数据的变量类型来控制变量值的边界，而应该事先人为的进行规划控制。
几个容器的表示大小的成员都用size_t类型，而fk_conn的arg_cnt/arg_parsed等等都是int，注意二者之间的转换。

77. 所有可配置的属性不在出现在struct fk_svr中，比如port/addr/max_conn等等，只从struct fk_conf中读取，避免重复出现两次，没有必要。struct fk_svr中只记录服务器的那些会变化的状态，而不记录那些属于静态的配置数据。

78. fk_log/fk_ev是2个独立于服务器业务逻辑的模块，层次比业务逻辑模块低。fk_conf模块是业务逻辑模块，且属于层次最低的业务逻辑模块。所以fk_conf模块依赖fk_log模块是合理的，从fk_log.h中读取FK_LOG_INFO等定义。

79. 通过git rebase可以将之前的hopex与现在的freekick两个断开的commit链重新连接起来。
mkdir apple
cd apple
git init
git add remote hopex URL/hopex.git
git add remote freekick URL/freekikc.git
git checkout -b v0 hopex/master
git checkout -b h0 hopex/master
git checkout -b f1 freekick/v1
git rebase h0
git checkout h0
git merge f1
#此时从v0到f1建立了一条完整的commit链

80. 在一个空的目录下不能用git branch来创建分支，只能用git checkout -b dev创建分支。
mkdir one
git init #此时.git/HEAD默认指向.git/refs/heads/master，但是此时.git/refs/heads目录为空
git branch dev #fatal: Not a valid object name: 'master'.
git checkout -b dev

81. libc应该与gcc配套，编译器提供了__WORDSIZE宏来定义int的长度是32/64位，stdint.h利用这个__WORDSIZE宏来定义int64_t/uint64这些类型。在自己的源码中使用int8_t/int16_t/int32_t/int64_t/uint_8/uint16_t/uint32_t/uint64_t，在不同的编译器和libc环境下编译都能保证变量长度是固定的。libc中用到int的地方，一般都是些表示状态flag的,或者文件描述符fd;如果涉及到表示一定范围的值则用到int32_t/size_t这些typedef过的数据类型。
__WORDSIZE不是编译器预定义，在rhel中是在bits/wordsize.h中根据预定义宏_x86_64来定义__WORDSIZE，在mac上是在stdint.h中根据预定义宏__LP64__来定义__WORDSIZE。

82. 何时server应该主动close connection？
a. 解析协议时有错误格式，直接close。
b. 解析出一条协议之后，但是此协议不符合预定义，此时不close client，只把此前解析出来的协议抛弃掉。

83. stddef.h中定义了利用编译器预定义宏__SIZE_TYPE__来typedef出size_t。在wheezy/rhel6中，实际是在glob.h中定义的。stddef.h中定义了NULL。stddef.h中提供fundamental types定义。

84. 依靠sizeof(long) == 4 ? 8可以判断当前的os是32/64bit。感觉用sizeof(uintptr_t)来判断更好。

85. 所有的无参数的函数用void来申明和定义，但是调用的地方不能用void做参数。

86. extern与static都是用来申明变量/函数的，二者意义相反，不能同时实施与同一个对象。static申明的作用：不生成global属性的符号，查看汇编可看到。用static申明的变量/函数，其定义只能出现在该static申明出现的.c文件中。所以static不能出现在.h文件中。

87. fk_modA.c中应该#include <fk_modA.h>的原因：为了避免申明与定义不一致。假如不这样做，如果在fk_modB.c中#include <fk_modA.h>，但是fk_modA.c中的实现与fk_modA.h的申明不一致，链接时就会找不到reference。

88. 由于在申明无参数的函数原型时没有使用void，会导致编译器认为这是一个K&R方式的函数申明，所以按照K&R方式来处理函数调用，以至于函数调用时传入了错误的参数也能通过编译。比如fk_ev_cycle/fk_ev_get_nearest_tmev的使用，我居然一直传错了参数，OMG...所以对于无参数的函数申明和定义一定要使用void。

89. void f(void) {g(1, 2);}: 从汇编码可以看到，f调用g函数调用过程:f负责将实参从右至左压栈，然后call g。在g里要访问参数，是以g的栈基址ebp为基准，往高地址方向偏移一定的数量就可以访问到由f压入的实参。可见，要保证参数的压栈和访问正确，必须保证f函数知道准确的g的参数个数以及类型，这样在f里才能根据ebp和固定的偏移量访问到参数。所以可见函数原型的声明是多么的重要。函数原型的申明的目的：为了检查调用f时参数个数/类型是否正确，保证正确的将实参压入栈。

90. 为何32bit的汇编和64bit的汇编差别很大呀? 32bit的比较好读懂。

91. 函数参数的栈空间的分配其实是有调用者通过压栈完成的，被调用者只是通过ebp的偏移来访问参数。其实被调用的函数结束之后，此时压入栈的参数在调用者的栈空间内还是存在的。

92. 为何现在的gcc对于没有static修饰的inline函数，不要求必须在同一个.c文件中定义，gcc会把这个inline函数当成普通的函数?感觉好confused...

93. TODO:尽量的使用int32_t/int64_t/uint32_t/uint64_t/int8_t/uint8_t来替换掉int/long/char，用来承载一些需要表示一定数值范围的变量。int仅仅用来表示一些状态值，比如0/1/-1等。在处理函数参数时要注意做安全的类型转换。

94. TODO: fk_svr_listen_cb里循环调用accept直到出错，因为有可能有多个新连接到来。

95. TODO: 去掉fk_sock_accept/fk_sock_close

96. 只处理在当前情况下会出现的errno，而不处理所有情况下的errno。

97. only handle runtime exceptions，而不处理程序的逻辑错误，逻辑错误必须在开发期处理掉。

98. fk_leaf/fk_node不提供成员函数的理由：(1)结构简单，只有set/get的简单操作逻辑；(2)只被对于的fk_heap/fk_list读写其成员变量。

99. 从hopex的倒数第二个commit版本export出来成为freekick，看看怎么把二者连接起来???

100. 改名fk_xxx_exit() ===> fk_xxx_deinit()，与fk_xxx_init()相对应。

101. 更改: fk_list->len(uint64_t), fk_dict->size(uint64_t), fk_str->len(uint32_t), fk_heap->len(uint64_t), fk_str->seq(uint8_t), fk_vtr->len(uint64_t)

102. c语言标准并未规定char/shor/int/long的具体字节数，只规定到了这些类型至少能覆盖到的取值范围，且sizoe(char) <= sizeof(short) <= sizeof(int) <= sizeof(long) <= sizeof(long long)。limits.h中的INT_MAX/INT_MIN等宏只是具体平台下的实现，c标准中并未为所以利用int8_t/int16_t/int32_t/int64_t这些类型可以保证在不同的编译器环境下具有相同的长度，代码可移植性好。

103. fk_str中用char*或者unsigned char*来作为字符串的存储都可以，仅仅是为了表示一个字节序列，而不是当做一个整数，无需关心符号问题。

104. epoll_wait()中的maxevents, timeout都为int，怎么处理类型转换???对应于这些参数的变量不要用int32_t/uint32_t，直接用int来存储。

105. c99标准规定: char可以实现为等同于signed char或者unsigned char，与int不同，int是等同于signed int的。所以在limits.h中定义CHAR_MAX/CHAR_MIN就依据__CHAR_UNSIGNED__这个宏来区别到底是哪种实现，不过现在用的这些linux上都是采用char等价于signed char，与int的方式保持一致。

106. 与内存或者文件长度相关的值，需要以字节计算的用size_t；与对象个数相关的值用uint32_t/uint64_t；二者之间的转换呢???

107. atoi替换成strtol/strtoul等???

108. size_t的目的：增加程序的可移植性。32bit gcc: typedef unsigned int, 64bit gcc: typedef long unsigned int。size_t覆盖了当前系统下最大的内存寻址范围，任意内存对象的最大长度都可以用size_t表示。

109. intmax_t/uintmax_t: 最大的integer类型，具体是哪种类型在stdint.h中给出了typedef。

110. ptrdiff_t: 用来表示两个指针的差，长度与size_t其实是一样的，由预定义宏__PTROFF_TYPE__决定，64bit gcc: typedef long int ptroff_t, 32bit gcc: typedef int ptroff_t。

111. wchar_t: 可以容纳所有支持的locale的字符，由预定义宏__WCHAR_TYPE__决定，64bit和32bit gcc: typedef int wchar_t。

112. c标准规定: sizeof(char) >= 1, sizeof(short) >= 2, sizeof(int) >= 2, sizeof(long) >= 4。

113. 标准库的函数和封装的system call函数很多以char/short/int/long这些原声类型为参数，怎么将size_t/wchar_t/ptrdiff_t/int32_t等c标准中typedef出来的类型来作为参数调用这些函数呢?而且要保证可移植性???

114. 与库函数参数相关的变量，尽量采取与其参数类型一致的类型。与系统的struct成员相关的变量，尽量采取与其成员类型一致的类型。用于fk_list_t/fk_heap_t的容器的计数的变量可以用uint32_t/uint64_t等确定长度的类型。twemproxy中强行的将uint8_t转换为char，依次来调用库函数，这样做不好吧???

115. 在具体的OS和gcc平台下code，需要知道每一个内置类型char/shor/int/long/float/double/long double的长度及其能表示的范围。对于标准库函数和system call中涉及到的数据类型，不要强行转换为内置类型，而用sys/types.h中定义的类型来表示。

116. 同样的os，同样的gcc，考虑32bit和64bit间的移植：内置类型就long不一样长度，指针长度不一样。

117. 不同的os，调用符合posix的接口函数，考虑移植：尽量使用sys/types.h中的那些预定义类型，不要用强行转换为内置类型。

118. 不能完全按照c标准的规定：不知道具体的char/short/int/long/long long的长度，不知道float/double/long double的具体长度和范围，要在具体的编译器实现下来写程序，不要期望写出能在所有平台上移植的代码。

119. 目前已知的符合posix的类unix系统和gcc的实现下，内置类型都是一样的，只要32bit和64bit的差异，所以只要调用符合posix的接口并且注意32bit与64bit的差别即可。

120. linux下feature_test_macros来控制是否暴露一些系统头文件总的接口和类型，必须在包含任何头文件之前来define这些macros来起作用。

121. 将与系统api和系统预定义类型无关的变量尽量用stdint.h中来表示。

122. linux下的features.h里并不定义_XOPEN_SOURCE/_POSIX_C_SOURCE/_POSIX_SOURCE，而是根据用户是否定义这些宏再定义一下其他的宏，比如如果用户定义了_XOPEN_SOURCE >= 700，就会自动将_POSIX_C_SOURCE定义为200809L。所以先include <fk_ftm.h>，再include <features.h>是没有问题的，可以在fk_env.h里include <features.h>。

123. 需要用到哪些信号，才去注册哪些handler；可能出现哪些信号，才需要去block哪些信号。并不需要关心所有种类的信号。比如freekick中，只利用SIGINT/SIGTERM来terminate进程，并且无需去block任何一种信号。如果一种未注册的信号出现，例如SIGKILL或者SIGQUIT，让系统采取默认的action，我们并不关心，因为这是一种非正常，非预期的结果，正常运用和维护的情况下不应该出现这两个信号。我们只关心我们需要利用的信号，比如freekick里的SIGINT/SIGTERM/SIGCHLD。

124. 对于hardware-generated signal，都是严重的无法恢复的错误，只需要采取默认的action就行，由系统产生core dump并且terminate掉。从linux 2.6起，hardware-generated signal是不可block，不可ignore，也不可catch的，进程会立即terminate。

125. 在版本v12里commit 90767cd0705aea0ccb72286363946cd51c50eb9d
linux下，采用glibc的malloc/free时，python t.py时会有段错误，使用jemalloc时没有，为啥?? 错误在fk_buf_alloc()里的realloc()发生，为啥呢???
在freebsd 10.3/mac 10.9下都没有这个错误，在freebsd 8.4下只要执行一个cmd就会段错误，在debian 7.9/rhel 6/7下执行到一定的时候会报错，rhel5没有测试。
应对：打印出realloc每次调用前后时的ptr, size的值，看看到底是出啥问题
怎么最后一次realloc()之前时,malloc_usable_size(ptr)变成了0??
bug描述：
*** glibc detected *** ./freekick: realloc(): invalid next size:
0x000000000124d3c0 ***

126. 在rhel5中，sigaction()的SA_RESTART编译出现undelared错误，非加上_BSD_SOURCE的feature test macro么?

127. MSL在linux下为30 seconds。

128. epoll/poll/kqueue提供的监测各种类型的fd上的event细分为很多种，但按大类划分也就是read/write这2大类的event，且poll()的分类比epoll()更多。epoll/poll/kqueue提供的2类read/write的event，对于不同类型的fd有着不同的含义。fk_ev仅提供read/write两种大类的event监测，对应于epoll/poll/kqueue提供的read/write 2大类event，且对各种类型的fd有效，对各自类型的fd的read/write处理由注册的callback决定，所以fk_ev仅仅只是将epoll/poll/kqueue进行封装而已，提供一个高层次的接口。

129. epoll/kqueue一次read事件触发，有没有以下这种可能：既有client的有效数据发送到，并且client关闭了连接？ 现在的fk_conn_recv_data中while循环来读取数据，就可能有逻辑错误。需要重构这几个函数。

130. v13的commit 3404f8a2c8cce4c39a306df330613aa5464e03d0版本里的bug：
运行python t.py完成之后会出现segment fault。
fk_cmd_mget->fk_conn_add_content_rsp()导致conn->timer的内存被错误的写，conn->timer->expired被写成了0，导致fk_svr_remove_conn->fk_conn_destroy->fk_ev_remove_tmev时并未删掉将conn->timer从evmgr里删掉，在conn断开后又触发了该timer的callback，导致segment
fault.到底是哪里出现了内存越界呢??  to do: (1)一点点的把v13的不同应用到v12版本上，看看到底是哪里的改动有可能出问题. 经过比对，是fk_svr_conn.c的修改导致了这一bug，具体是哪里需要进一步排查

bug排查的线索：
(1) conn断开后仍然调用fk_conn_timer_cb()，发现conn->timer并未成功删除；

(2) 发现fk_conn_destroy()时conn->timer->expired == 0，导致并未成功删除conn->timer;

(3) fk_conn_destroy()时的conn->timer->expired正常情况下不可能为0，可能是某处修改了conn->timer->expired的值，采用gdb的watch指令来监视conn->timer->expired的值(先打印出expired的地址ADDRESS，然后直接watch *ADDRESS);

(4) 发现是fk_conn_add_content_rsp()中的sprintf()修改了conn->timer->expired的值，猜测可能是写conn->wbuf内存越界影响到了conn->timer；

(5) 发现conn->wbuf与conn->timer的地址很接近，采用print和x指令打印出wbuf, timer的值，发现wbuf->buffer所指的字符串覆盖到了timer的内存

(6) 在fk_cmd_mget()打印出将要写入wbuf的字符串以及其长度，发现一个0长度的字符串却指向了一串的字符串，且包含了wbuf->buffer溢出的那部分，应该就是这一次将这个字符串写入wbuf->buffer导致其内存溢出；

(7) 在调用fk_conn_add_content_rsp()时发现此时的free_len并不足以装下wbuf->buffer的字符串，而且sprintf()会假设将'\0'作为源字符串的结尾，并没有参数控制长度。在此处，实际要拷贝的是一个0长度的字符串，但是这个地址刚好指向了另外一个非零的字符串，这样采用sprintf()将会错误的拷贝字符串，并且超过了wbuf->buffer的有效长度，造成了内存的溢出。

(8) 用snprintf()提供了size来控制拷贝的长度，也就是format出来的字符串最多为size-1个字节，外加自动添加的结尾'\0'。直接使用snprintf()将字符串写入wbuf并不方便，因为有一个结尾的'\0'要处理，所以添加一个临时的buf和memcpy()来处理. TODO: 将临时的buf移到fk_conn_t里，免得每次都alloc/free。

(9)在每一个frame层上查看conn, conn->timer, conn->wbuf的内容都是一样的，是因为此时程序已经执行到最深层的frame，已经将conn->wbuf, conn->timer所指向的内容修改过了，所以不管在那一层来查看这些位于heap上的变量时，结果都是一样的。

131. v13 commit ae91d31a1bd70911a735f71709ce36a9c28754d5中: fk_svr_conn.c的fk_conn_read_cb()中的fk_conn_send_rsp()的调用地方不对, 当一个protocol未完全解析完成时，会调到执行fk_conn_send_rsp()将arg_vtr给清理掉了，造成内存错误.
主要是fk_vtr_shrink(conn->arg_vtr)的时机不对，应该放到每一次cmd成功处理之后来执行；
fk_buf_shrink(conn->arg_vtr)应该放在fk_conn_proc_cmd()里，与fk_conn_parse_req()中的fk_vtr_stretch(conn->arg_vtr)对应，每一个protocol会执行一次；
fk_buf_shrink(conn->rbuf)可以放在fk_conn_rsp_send()里，与fk_conn_recv_data()中的fk_buf_stretch(conn->rbuf)对应，每一次read callback会执行一次；

在v13里，由于修改了fk_conn_recv_data()的策略，并不是先一次while循环全部recv()完所有数据，再去parse req和proc cmd; 而是执行一次recv()后就去parse req和proc cmd，导致对于mset这种协议数据太多，由于rbuf的限制未能一次recv()读取所有数据，导致fk_conn_parse_req()返回了FK_SVR_AGAIN，从而break跳出while，接着执行了fk_conn_send_rsp()导致错误的在此时执行了fk_vtr_shrink()将parse时分配的5个长度的arg_vtr给复原成了4个长度，导致mset的第5个参数弄丢了，悲剧！！！

bug排查线索:
在make os=linux debug=yes jemalloc=yes情况下
(1) python t.py出现segment fault，查出是运行到处理第2条mset指令时出现segment
fault；

(2) 直接查server，发现是dict的某个fk_elt_t的节点的key为NULL，一头雾水；

(2) 查server困难，只好一段一段排查t.py，到底是哪一部分导致的segment faul，发现与mset之前的指令都无关，只要运行2条mset指令就会出现错误；

(3) 打断点在fk_cmd_mset处，来跟踪这2条mset指令。print出conn, conn->arg_vtr等变量，发现在处理第一天mset时就出现conn->arg_vtr->len为4，conn->arg_parsed为5，显然有问题，猜想conn->arg_vtr->len内存被修改；

(4) watch指令监视conn->arg_vtr->len，发现是fk_conn_send_rsp里的fk_vtr_shrink处复原了conn->arg_vtr的长度为初始值4；单步跟踪，发现是fk_conn_parse_req()未解析完整个protocol时跳转到执行fk_conn_send_rsp，这样一来将fk_conn_parse_req()的分配的arg_vtr又复原到初始长度4，导致第解析出第5个argument后存储到了越界内存处，即v2，在后续的处理中，将一个非法内存存入到dict中去了，导致在后续在fk_dict_strech时发现有非法内存，导致segment fault。

132. assert()和fk_log_debug()在非debug编译时都应该为空, assert()通过NDEBUG宏来控制。

133. 用二分法来注释掉不同区域的代码，来找出到底哪部分导致了gmon.out没有出现，发现原来是fk_set_pwd()中调用了chdir()导致gmon.out实际被保存到了/tmp/中去了，因为在freekick.conf中设置了工作目录为/tmp.
